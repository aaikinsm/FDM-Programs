package com.fdmgroup.controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.fdmgroup.dao.ExamCollectionDao;
import com.fdmgroup.model.Exam;
import com.fdmgroup.model.Question;
import com.fdmgroup.model.Result;
import com.fdmgroup.model.SessionUser;
import com.fdmgroup.model.TimerThread;
import com.fdmgroup.model.User;
import com.fdmgroup.view.ExamView;

public class ExamController {
	private Exam exam;
	private Result result;
	private User user;
	private ExamCollectionDao examCollectionDao;
	private static ExamController examController;
	private int examTime, qRemaining;
	Question q;
	ExamView eView;
	TimerThread timer;
	Scanner in = new Scanner(System.in);

	private ExamController() {
		super();
		examCollectionDao = ExamCollectionDao.getInstance();
		user = SessionUser.getLoggedInUser();
	}

	public static ExamController getInstance() {
		if (examController == null) {
			examController = new ExamController();
		}
		return examController;
	}

	public void viewExams(int courseId) {
		if (courseId == 0) {
			List<Exam> exams = examCollectionDao.findAll();
			if (exams.isEmpty())
				System.out.println("There are no available exams");
			else {
				System.out.println("Enter the ID of the exam you would like to open");
				for (Exam exam : exams) {
					System.out.println("ID:" + exam.getId() + ") " + exam.getTitle());
				}
				Scanner in = new Scanner(System.in);
				int idNum = in.nextInt();
				startExam(idNum);
			}
		}
	}
	
	public void viewUserResults(User user) {
		List<Result> uResults =  examCollectionDao.getUserResults(user);
		for (Result result : uResults) {
			Exam e = examCollectionDao.findById(result.getExam().getId());
			System.out.print(e.getTitle()+": "+result.calculateResult());
			if(result.passed())
				System.out.println(" : Passed");
			else
				System.out.println(" : Failed");
		}
		
	}

	public void startExam(int id) {
		exam = (Exam) examCollectionDao.findById(id);
		if (exam != null) {
			eView = new ExamView(exam.getTitle());
			examTime = exam.getTimer();
			exam.randomize();
			result = new Result(exam, SessionUser.getLoggedInUser());
			q = exam.getNextQuestion();

			eView.button.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					if (q != null && eView.button.getLabel().equals("START")) {
						qRemaining = exam.getNumOfQuestions();
						timer = new TimerThread(examTime, eView);
						timer.start();
						System.out.println("Starting Exam");
						eView.qText.setText(q.getQuestion());
						eView.button.setLabel("Next");
						eView.qCount.setText("Questions remaining: " + qRemaining);
						qRemaining--;
					} else if (q != null && eView.button.getLabel().equals("Next")) {
						eView.qCount.setText("Questions remaining: " + qRemaining);
						qRemaining--;
						if (eView.selections.getSelectedCheckbox().getLabel().equalsIgnoreCase(q.getCorrectAnswer())) {
							System.out.println("Correct");
							eView.eTimer.setText("CORRECT");
							result.addResultData(true);
						} else {
							System.out.println("Wrong");
							eView.eTimer.setText("WRONG");
							result.addResultData(false);
						}
						q = exam.getNextQuestion();
						if (q == null) {
							examComplete();
						} else {
							eView.qText.setText(q.getQuestion());
						}
					}
				}
			});
		}
	}

	public void examComplete() {
		eView.qCount.setText("Exam Complete");
		eView.eTimer.setText("");
		eView.qText.setText("");
		timer.stop = true;
		eView.qText.setText("Your Result: " + result.calculateResult() + "%");
		examCollectionDao.addResult(result);
	}

	public void createExam() {
		// test//
		Exam myExam = new Exam(30, "My Almighty Exam", 1, user);
		Question q1 = new Question("What is red?");
		q1.addPossibleAnswer("a) A shape");
		q1.addPossibleAnswer("b) A color");
		q1.setCorrectAnswer("b");
		Question q2 = new Question("What is 5+2?");
		q2.addPossibleAnswer("a) 7");
		q2.addPossibleAnswer("b) 8");
		q2.setCorrectAnswer("a");
		myExam.addQuestion(q1);
		myExam.addQuestion(q2);
		examCollectionDao.create(myExam);

		Exam myExam2 = new Exam(30, "G1 Road Test", 1, user);
		Question qD1 = new Question(
				"In poor weather conditions drivers are permitted to use high beam lights however drivers must switch back to low beam lights when:");
		qD1.addPossibleAnswer("a) Following closer than 60 meters behind another vehicle");
		qD1.addPossibleAnswer("b) Drivers are never permitted to drive with high beam lights");
		qD1.addPossibleAnswer("c) Approaching an oncoming vehicle closer than 150 meters");
		qD1.addPossibleAnswer("d) Both answers a) and c) are correct");
		qD1.setCorrectAnswer("d");
		Question qD2 = new Question(
				"The vehicle in front of you is stopped at a crosswalk for a pedestrian. You should:");
		qD2.addPossibleAnswer("a) Pass the stopped vehicle on the right");
		qD2.addPossibleAnswer("b) Stop, sound the horn and wait for the driver's signal to pass");
		qD2.addPossibleAnswer("c) Not pass any vehicle stopped to allow a pedestrian to cross");
		qD2.addPossibleAnswer("d) Pass the stopped vehicle on the Left");
		qD2.setCorrectAnswer("c");
		Question qD3 = new Question("Unless you are intending to turn left or pass another vehicle you should:");
		qD3.addPossibleAnswer("a) Drive on the shoulder of the highway");
		qD3.addPossibleAnswer("b) Drive in the center lane");
		qD3.addPossibleAnswer("c) Keep to the well to the right");
		qD3.addPossibleAnswer("d) Keep to the well to the Left");
		qD3.setCorrectAnswer("c");
		Question qD4 = new Question(
				"G1 or G2 Drivers - You may be called in for an interview with the Ministry of Transportation if you accumulate how many demerit points?");
		qD4.addPossibleAnswer("a) 2 demerit points");
		qD4.addPossibleAnswer("b) 6 or more demerit points");
		qD4.addPossibleAnswer("c) 9 or more demerit points");
		qD4.addPossibleAnswer("d) At any time at the discretion of the ministry");
		qD4.setCorrectAnswer("b");
		Question qD5 = new Question(
				"G1 or G2 Drivers - You may be called in for an interview with the Ministry of Transportation if you accumulate how many demerit points?");
		qD5.addPossibleAnswer("a) 2 demerit points");
		qD5.addPossibleAnswer("b) 6 or more demerit points");
		qD5.addPossibleAnswer("c) 9 or more demerit points");
		qD5.addPossibleAnswer("d) At any time at the discretion of the ministry");
		qD5.setCorrectAnswer("b");
		myExam2.addQuestion(qD1);
		myExam2.addQuestion(qD2);
		myExam2.addQuestion(qD3);
		myExam2.addQuestion(qD4);
		myExam2.addQuestion(qD5);
		examCollectionDao.create(myExam2);
		//
	}
}
