package com.fdmgroup.dao;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fdmgroup.model.Exam;
import com.fdmgroup.model.IStorable;
import com.fdmgroup.model.Question;
import com.fdmgroup.model.Result;
import com.fdmgroup.model.User;

public class ExamCollectionDao implements IStorage<IStorable>{
	private List<Exam> examList;
	private List<Exam> deletedExamList ;
	private List<Result> resultList;
	private Map<Exam,ArrayList<Result>> resultsToExam;
	private Map<User,ArrayList<Result>> resultsForUser;
	private static ExamCollectionDao examCollectionDao = null;
	
	
	private ExamCollectionDao() {
		super();
		examList = new ArrayList<>();
		deletedExamList = new ArrayList<>();
		resultList = new ArrayList<>();
		resultsToExam = new HashMap<>();
		resultsForUser = new HashMap<>();
		
		//test//
		Question q = new Question("What is red?");
		//q.addPossibleAnswer("a) A shape");
		q.addPossibleAnswer("b) A color");
		q.setCorrectAnswer("b");
		Question q2 = new Question("What is 5+2?");
		q.addPossibleAnswer("a) 7");
		q.addPossibleAnswer("b) 8");
		q.setCorrectAnswer("a");
		Exam myExam = new Exam(0, new User(), true, 0);
		myExam.addQuestion(q);
		myExam.addQuestion(q2);
		examCollectionDao.create(myExam);
	}

	public static ExamCollectionDao getInstance(){
		if (examCollectionDao == null){
			examCollectionDao = new ExamCollectionDao();
		}
		return examCollectionDao;
	}
	
	public boolean isExamAccessibleToUser(int examID, int userID){
		//:Todo
		return false;
	}
	
	public ArrayList<Result> getExamResults(Exam exam){
		return resultsToExam.get(exam);
	}
	
	public void submitResult(Exam exam, Result result){
		ArrayList<Result> rslt = resultsToExam.get(exam);
		rslt.add(result);
		resultsToExam.put(exam, rslt);
	}
	
	public Result getUserResult(User user, Exam exam){
		ArrayList<Result> rslt = resultsForUser.get(user);
		for (Result result : rslt) {
			if(result.getExam() == exam){
				return result;
			}
		}
		return null;
	}
	
	public void deleteExam(Exam exam){
		deletedExamList.add(exam);
		examList.remove(exam);
	}
	
	public void recoverExam(Exam exam){
		examList.add(exam);
		deletedExamList.remove(exam);
	}

	@Override
	public IStorable findById(int id) {
		for (Exam exam : examList) {
			if(exam.getId() == id)
				return exam;
		}
		return null;
	}

	@Override
	public List findAll() {
		return examList;
	}

	@Override
	public IStorable create(IStorable t) {
		Exam e = (Exam) t;
		if(examList.size()!=0){
			e.setId(examList.get(examList.size()-1).getId()+1);
		}else
			e.setId(1);
		examList.add(e);
		return e;
	}

	@Override
	public IStorable update(IStorable t) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean delete(IStorable e) {
		if (examList.indexOf((Exam)e) != -1){
			deletedExamList.add((Exam) e);
			examList.remove(examList.indexOf((Exam)e));
			return true;
		}
		return false;
	}
}
