package com.fdmgroup.model;

import java.util.ArrayList;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

@Entity
@Table(name = "OE_QUESTION")
public class Question {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "question_id")
	private int id;
	
	@Column
	private String question;
	
	@Column
	private String correctAnswer;
	
	@Column
	private String note;
	
	@Column
	private String possibleAnswer1 = "";
	
	@Column
	private String possibleAnswer2 = "";
	
	@Column
	private String possibleAnswer3 = "";
	
	@Column
	private String possibleAnswer4 = "";
	
	@Transient
	private ArrayList<String> possibleAnswers;
	
	@ManyToOne
	private Exam exam;
	
	public Question(String question) {
		super();
		this.question = question;
		possibleAnswers = new ArrayList<String>();
		loadPossibleAnswers();
	}

	public String getQuestion() {
		String q = question;
		for (String string : possibleAnswers) {
			q += "\n\t ("+string;
		}
		return q;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	public String getCorrectAnswer() {
		return correctAnswer;
	}

	public void setCorrectAnswer(String correctAnswer) {
		this.correctAnswer = correctAnswer;
	}

	public String getNote() {
		return note;
	}

	public void setNote(String note) {
		this.note = note;
	}
	
	public void addPossibleAnswer(String ans){
		possibleAnswers.add(ans);
		savePossibleAnswers();
	}
	
	public void savePossibleAnswers(){
		if(possibleAnswers.get(1) != null)
			possibleAnswer1 = possibleAnswers.get(1);
		
		if(possibleAnswers.get(2) != null)
			possibleAnswer2 = possibleAnswers.get(2);
		
		if(possibleAnswers.get(3) != null)
			possibleAnswer3 = possibleAnswers.get(3);
		
		if(possibleAnswers.get(4) != null)
			possibleAnswer4 = possibleAnswers.get(4);	
	}
	
	public void loadPossibleAnswers(){
		if(!possibleAnswer1.isEmpty())
			addPossibleAnswer(possibleAnswer1);
		if(!possibleAnswer2.isEmpty())
			addPossibleAnswer(possibleAnswer2);
		if(!possibleAnswer3.isEmpty())
			addPossibleAnswer(possibleAnswer3);
		if(!possibleAnswer4.isEmpty())
			addPossibleAnswer(possibleAnswer4);
	}
}
